package be.cosic.eid;

import javacard.security.*;

public class DavinaEidCard extends SampleEidCard {

	/**
	 * called by the JCRE to create an applet instance
	 */
	public static void install(byte[] bArray, short bOffset, byte bLength) {

		// create a Davina eID card applet instance
		new DavinaEidCard();

	}

	private DavinaEidCard() {

		super();

		// initialize private keys
		initializePrivateKeys();

	}

	private void initializePrivateKeys() {

		byte[] P, Q, DP1, DQ1, PQ;

		/*
		 * extracted from http://www.eid-shop.be/media/certificates.zip
		 * 
		 * $ openssl pkcs12 -in "Davina SPECIMEN Authentication.p12" -nodes 
		 *   -out Davina_Authentication.pem
		 * Enter Import Password: Certipost0.
		 * $ openssl rsa -in Davina_Authentication.pem -text -noout
		 */
		authPrivateKey =
			(RSAPrivateCrtKey)KeyBuilder.buildKey(
				KeyBuilder.TYPE_RSA_CRT_PRIVATE,
				KeyBuilder.LENGTH_RSA_1024,
				false);

		P =
			new byte[] {
				(byte)0xcc,
				(byte)0xa0,
				(byte)0xa8,
				(byte)0x09,
				(byte)0x8e,
				(byte)0x20,
				(byte)0x3c,
				(byte)0x75,
				(byte)0xbe,
				(byte)0xa2,
				(byte)0x93,
				(byte)0x44,
				(byte)0x9b,
				(byte)0x5b,
				(byte)0xca,
				(byte)0x6a,
				(byte)0xdd,
				(byte)0x39,
				(byte)0x0d,
				(byte)0x87,
				(byte)0xd5,
				(byte)0xee,
				(byte)0xda,
				(byte)0xb2,
				(byte)0xf9,
				(byte)0xd2,
				(byte)0xf5,
				(byte)0x1a,
				(byte)0x77,
				(byte)0x11,
				(byte)0x98,
				(byte)0x18,
				(byte)0xa6,
				(byte)0x9c,
				(byte)0xe1,
				(byte)0x8a,
				(byte)0x89,
				(byte)0x65,
				(byte)0xa1,
				(byte)0x9b,
				(byte)0x1f,
				(byte)0x22,
				(byte)0xb8,
				(byte)0xeb,
				(byte)0x8c,
				(byte)0xb9,
				(byte)0xd3,
				(byte)0xe7,
				(byte)0x1d,
				(byte)0xf6,
				(byte)0xab,
				(byte)0x4a,
				(byte)0x2a,
				(byte)0x5b,
				(byte)0xfc,
				(byte)0x08,
				(byte)0x2f,
				(byte)0xfb,
				(byte)0x38,
				(byte)0x1d,
				(byte)0xfb,
				(byte)0x56,
				(byte)0x81,
				(byte)0x83 };
		authPrivateKey.setP(P, (short)0, (short)64);

		Q =
			new byte[] {
				(byte)0xcb,
				(byte)0xc8,
				(byte)0xdf,
				(byte)0x5b,
				(byte)0x7b,
				(byte)0x51,
				(byte)0x39,
				(byte)0xf6,
				(byte)0x75,
				(byte)0x8a,
				(byte)0x5b,
				(byte)0x59,
				(byte)0x1e,
				(byte)0xb3,
				(byte)0x75,
				(byte)0x16,
				(byte)0x6e,
				(byte)0x50,
				(byte)0xfb,
				(byte)0x04,
				(byte)0xf6,
				(byte)0xc7,
				(byte)0xd3,
				(byte)0xfe,
				(byte)0x36,
				(byte)0xfe,
				(byte)0xd3,
				(byte)0xad,
				(byte)0x08,
				(byte)0x7b,
				(byte)0xbb,
				(byte)0xee,
				(byte)0xd1,
				(byte)0x38,
				(byte)0xb4,
				(byte)0xee,
				(byte)0x7e,
				(byte)0xf7,
				(byte)0x2f,
				(byte)0x85,
				(byte)0x09,
				(byte)0x20,
				(byte)0x03,
				(byte)0xb8,
				(byte)0x0c,
				(byte)0xd2,
				(byte)0xe1,
				(byte)0x6f,
				(byte)0xd4,
				(byte)0xca,
				(byte)0x61,
				(byte)0xfe,
				(byte)0xc1,
				(byte)0xbf,
				(byte)0x28,
				(byte)0x5c,
				(byte)0xa0,
				(byte)0xca,
				(byte)0xda,
				(byte)0x13,
				(byte)0x97,
				(byte)0x7c,
				(byte)0x06,
				(byte)0x19 };
		authPrivateKey.setQ(Q, (short)0, (short)64);

		DP1 =
			new byte[] {
				(byte)0x7d,
				(byte)0xa6,
				(byte)0x00,
				(byte)0xc8,
				(byte)0xad,
				(byte)0x3e,
				(byte)0xda,
				(byte)0x21,
				(byte)0x2a,
				(byte)0xc7,
				(byte)0xc5,
				(byte)0x4a,
				(byte)0x11,
				(byte)0x63,
				(byte)0x91,
				(byte)0xad,
				(byte)0x80,
				(byte)0xdd,
				(byte)0xb1,
				(byte)0x93,
				(byte)0x41,
				(byte)0x28,
				(byte)0x03,
				(byte)0x9e,
				(byte)0x76,
				(byte)0x8c,
				(byte)0xb4,
				(byte)0xf8,
				(byte)0x65,
				(byte)0x38,
				(byte)0xa6,
				(byte)0x7e,
				(byte)0x2c,
				(byte)0x80,
				(byte)0x94,
				(byte)0x75,
				(byte)0x6e,
				(byte)0xdc,
				(byte)0xbb,
				(byte)0x18,
				(byte)0xf7,
				(byte)0x4b,
				(byte)0x68,
				(byte)0xe5,
				(byte)0x2a,
				(byte)0x6a,
				(byte)0x48,
				(byte)0xd5,
				(byte)0xd7,
				(byte)0xae,
				(byte)0x49,
				(byte)0x8b,
				(byte)0xa6,
				(byte)0xeb,
				(byte)0x08,
				(byte)0x9d,
				(byte)0x36,
				(byte)0x69,
				(byte)0x3a,
				(byte)0x12,
				(byte)0x1e,
				(byte)0xed,
				(byte)0x05,
				(byte)0x65 };
		authPrivateKey.setDP1(DP1, (short)0, (short)64);

		DQ1 =
			new byte[] {
				(byte)0x97,
				(byte)0xcd,
				(byte)0xc7,
				(byte)0x35,
				(byte)0x2a,
				(byte)0xa3,
				(byte)0xd3,
				(byte)0x7d,
				(byte)0xd9,
				(byte)0x09,
				(byte)0x7c,
				(byte)0x0a,
				(byte)0xe3,
				(byte)0x67,
				(byte)0xe3,
				(byte)0xad,
				(byte)0x15,
				(byte)0xf8,
				(byte)0x95,
				(byte)0x45,
				(byte)0x99,
				(byte)0x60,
				(byte)0x3a,
				(byte)0x77,
				(byte)0x81,
				(byte)0x18,
				(byte)0x4b,
				(byte)0x2e,
				(byte)0xf6,
				(byte)0xc6,
				(byte)0xd5,
				(byte)0xb4,
				(byte)0x8d,
				(byte)0x7e,
				(byte)0xa4,
				(byte)0xa9,
				(byte)0x95,
				(byte)0x43,
				(byte)0x25,
				(byte)0xcf,
				(byte)0x00,
				(byte)0x81,
				(byte)0x2c,
				(byte)0xc4,
				(byte)0x0a,
				(byte)0x29,
				(byte)0x7d,
				(byte)0x6e,
				(byte)0x05,
				(byte)0x21,
				(byte)0xcd,
				(byte)0xe6,
				(byte)0x2d,
				(byte)0x05,
				(byte)0xed,
				(byte)0x57,
				(byte)0x33,
				(byte)0x20,
				(byte)0x69,
				(byte)0x5b,
				(byte)0x76,
				(byte)0xd9,
				(byte)0x18,
				(byte)0xe1 };
		authPrivateKey.setDQ1(DQ1, (short)0, (short)64);

		PQ =
			new byte[] {
				(byte)0x67,
				(byte)0x5e,
				(byte)0xfa,
				(byte)0x4e,
				(byte)0xaa,
				(byte)0xc6,
				(byte)0x11,
				(byte)0xac,
				(byte)0x7d,
				(byte)0x53,
				(byte)0x01,
				(byte)0xb5,
				(byte)0x57,
				(byte)0x8b,
				(byte)0x8a,
				(byte)0x92,
				(byte)0xca,
				(byte)0x1e,
				(byte)0x94,
				(byte)0xdb,
				(byte)0x45,
				(byte)0x33,
				(byte)0xc4,
				(byte)0x20,
				(byte)0xec,
				(byte)0xdb,
				(byte)0x82,
				(byte)0x76,
				(byte)0x9d,
				(byte)0xba,
				(byte)0x8f,
				(byte)0x70,
				(byte)0xf3,
				(byte)0x51,
				(byte)0xd6,
				(byte)0x65,
				(byte)0x59,
				(byte)0x5e,
				(byte)0x7d,
				(byte)0x0e,
				(byte)0x56,
				(byte)0x24,
				(byte)0x93,
				(byte)0x51,
				(byte)0xab,
				(byte)0x93,
				(byte)0x1e,
				(byte)0xb8,
				(byte)0x40,
				(byte)0xe0,
				(byte)0xa9,
				(byte)0x04,
				(byte)0xd1,
				(byte)0x89,
				(byte)0x66,
				(byte)0xad,
				(byte)0xbc,
				(byte)0x04,
				(byte)0xae,
				(byte)0x58,
				(byte)0x24,
				(byte)0x7b,
				(byte)0x05,
				(byte)0x02 };
		authPrivateKey.setPQ(PQ, (short)0, (short)64);

		/*
		 * extracted from http://www.eid-shop.be/media/certificates.zip
		 * 
		 * $ openssl pkcs12 -in "Davina SPECIMEN Signature.p12" -nodes 
		 *   -out Davina_Signature.pem
		 * Enter Import Password: Certipost0.
		 * $ openssl rsa -in Davina_Signature.pem -text -noout
		 */
		nonRepPrivateKey =
			(RSAPrivateCrtKey)KeyBuilder.buildKey(
				KeyBuilder.TYPE_RSA_CRT_PRIVATE,
				KeyBuilder.LENGTH_RSA_1024,
				false);

		P =
			new byte[] {
				(byte)0xf8,
				(byte)0xa7,
				(byte)0x39,
				(byte)0x92,
				(byte)0x81,
				(byte)0x5d,
				(byte)0xaa,
				(byte)0xa8,
				(byte)0xb9,
				(byte)0xfc,
				(byte)0xd5,
				(byte)0x62,
				(byte)0xd9,
				(byte)0xa2,
				(byte)0x81,
				(byte)0x96,
				(byte)0x25,
				(byte)0x9b,
				(byte)0xa9,
				(byte)0x64,
				(byte)0xf8,
				(byte)0xa7,
				(byte)0xc6,
				(byte)0x67,
				(byte)0x0c,
				(byte)0xfb,
				(byte)0x5d,
				(byte)0xd3,
				(byte)0x89,
				(byte)0x35,
				(byte)0x53,
				(byte)0xd9,
				(byte)0xd2,
				(byte)0xbb,
				(byte)0xa2,
				(byte)0xe0,
				(byte)0x33,
				(byte)0x01,
				(byte)0x86,
				(byte)0x92,
				(byte)0xf3,
				(byte)0x3e,
				(byte)0xc4,
				(byte)0x9b,
				(byte)0x35,
				(byte)0x82,
				(byte)0xbf,
				(byte)0x1e,
				(byte)0xc8,
				(byte)0xe3,
				(byte)0x36,
				(byte)0x60,
				(byte)0x95,
				(byte)0x19,
				(byte)0xb4,
				(byte)0x90,
				(byte)0x4c,
				(byte)0xaa,
				(byte)0x87,
				(byte)0x63,
				(byte)0x48,
				(byte)0xc4,
				(byte)0xe7,
				(byte)0x81 };
		nonRepPrivateKey.setP(P, (short)0, (short)64);

		Q =
			new byte[] {
				(byte)0xdd,
				(byte)0xba,
				(byte)0x0b,
				(byte)0xeb,
				(byte)0x3d,
				(byte)0x11,
				(byte)0x7c,
				(byte)0x7e,
				(byte)0x4c,
				(byte)0x9a,
				(byte)0x3a,
				(byte)0x0b,
				(byte)0xd4,
				(byte)0x83,
				(byte)0x82,
				(byte)0x8c,
				(byte)0x7b,
				(byte)0x99,
				(byte)0x26,
				(byte)0x09,
				(byte)0x39,
				(byte)0x39,
				(byte)0x25,
				(byte)0x10,
				(byte)0xca,
				(byte)0xd9,
				(byte)0x4f,
				(byte)0xf9,
				(byte)0x44,
				(byte)0x1d,
				(byte)0x54,
				(byte)0xf2,
				(byte)0xbb,
				(byte)0xb1,
				(byte)0xae,
				(byte)0x2d,
				(byte)0x51,
				(byte)0x14,
				(byte)0xc5,
				(byte)0x12,
				(byte)0x77,
				(byte)0x57,
				(byte)0xa5,
				(byte)0xd0,
				(byte)0xd7,
				(byte)0x08,
				(byte)0x80,
				(byte)0xb1,
				(byte)0xd1,
				(byte)0x46,
				(byte)0x45,
				(byte)0xe8,
				(byte)0x28,
				(byte)0xc5,
				(byte)0x67,
				(byte)0x54,
				(byte)0x6a,
				(byte)0xf3,
				(byte)0xac,
				(byte)0xd1,
				(byte)0xfd,
				(byte)0x6d,
				(byte)0x15,
				(byte)0xb7 };
		nonRepPrivateKey.setQ(Q, (short)0, (short)64);

		DP1 =
			new byte[] {
				(byte)0x2f,
				(byte)0xa5,
				(byte)0x6b,
				(byte)0x84,
				(byte)0xc5,
				(byte)0x41,
				(byte)0x3b,
				(byte)0x88,
				(byte)0x65,
				(byte)0x4b,
				(byte)0x2b,
				(byte)0x60,
				(byte)0x6b,
				(byte)0xaf,
				(byte)0x96,
				(byte)0x01,
				(byte)0x3d,
				(byte)0x67,
				(byte)0x9c,
				(byte)0x87,
				(byte)0xfa,
				(byte)0x95,
				(byte)0xbb,
				(byte)0x90,
				(byte)0xd7,
				(byte)0x8d,
				(byte)0xfb,
				(byte)0x26,
				(byte)0xa3,
				(byte)0xae,
				(byte)0x12,
				(byte)0x49,
				(byte)0x34,
				(byte)0xf6,
				(byte)0x3b,
				(byte)0x79,
				(byte)0x96,
				(byte)0x8c,
				(byte)0x7e,
				(byte)0x4a,
				(byte)0xfe,
				(byte)0x4d,
				(byte)0x52,
				(byte)0xc3,
				(byte)0x22,
				(byte)0xf7,
				(byte)0xd0,
				(byte)0xc3,
				(byte)0x87,
				(byte)0x5e,
				(byte)0xf2,
				(byte)0x76,
				(byte)0x83,
				(byte)0x5b,
				(byte)0x8f,
				(byte)0x9b,
				(byte)0xee,
				(byte)0xf4,
				(byte)0xe6,
				(byte)0x48,
				(byte)0x82,
				(byte)0x13,
				(byte)0x29,
				(byte)0x01 };
		nonRepPrivateKey.setDP1(DP1, (short)0, (short)64);

		DQ1 =
			new byte[] {
				(byte)0x09,
				(byte)0x0e,
				(byte)0x91,
				(byte)0x70,
				(byte)0x11,
				(byte)0x75,
				(byte)0x86,
				(byte)0x65,
				(byte)0x4e,
				(byte)0x51,
				(byte)0xba,
				(byte)0x6f,
				(byte)0x43,
				(byte)0x45,
				(byte)0xff,
				(byte)0xee,
				(byte)0x27,
				(byte)0x1a,
				(byte)0x51,
				(byte)0x60,
				(byte)0x6d,
				(byte)0x12,
				(byte)0xf5,
				(byte)0x7d,
				(byte)0xa3,
				(byte)0x1b,
				(byte)0x8f,
				(byte)0x55,
				(byte)0xba,
				(byte)0x3f,
				(byte)0x8c,
				(byte)0x79,
				(byte)0xc1,
				(byte)0xca,
				(byte)0xf7,
				(byte)0x37,
				(byte)0x68,
				(byte)0xa9,
				(byte)0x75,
				(byte)0x87,
				(byte)0x54,
				(byte)0x92,
				(byte)0xa2,
				(byte)0xf6,
				(byte)0x4d,
				(byte)0xe2,
				(byte)0x4e,
				(byte)0x07,
				(byte)0x75,
				(byte)0x69,
				(byte)0xee,
				(byte)0x6f,
				(byte)0x16,
				(byte)0x43,
				(byte)0x41,
				(byte)0xfe,
				(byte)0x43,
				(byte)0xc4,
				(byte)0x22,
				(byte)0x5a,
				(byte)0x0d,
				(byte)0x85,
				(byte)0x08,
				(byte)0x2f };
		nonRepPrivateKey.setDQ1(DQ1, (short)0, (short)64);

		PQ =
			new byte[] {
				(byte)0x86,
				(byte)0x10,
				(byte)0xb7,
				(byte)0x2d,
				(byte)0xa3,
				(byte)0x51,
				(byte)0xe7,
				(byte)0x26,
				(byte)0xdd,
				(byte)0x38,
				(byte)0x08,
				(byte)0x56,
				(byte)0xfa,
				(byte)0xad,
				(byte)0x5f,
				(byte)0xea,
				(byte)0xdf,
				(byte)0xc3,
				(byte)0xf0,
				(byte)0xf6,
				(byte)0xc0,
				(byte)0xcb,
				(byte)0x39,
				(byte)0x08,
				(byte)0xf3,
				(byte)0xc8,
				(byte)0x51,
				(byte)0xb2,
				(byte)0x09,
				(byte)0x3a,
				(byte)0xed,
				(byte)0x65,
				(byte)0xd3,
				(byte)0xdf,
				(byte)0xe0,
				(byte)0x5e,
				(byte)0xd7,
				(byte)0x9f,
				(byte)0x68,
				(byte)0xe9,
				(byte)0xa1,
				(byte)0xd0,
				(byte)0x98,
				(byte)0xb7,
				(byte)0x28,
				(byte)0x98,
				(byte)0x88,
				(byte)0xcc,
				(byte)0x09,
				(byte)0x90,
				(byte)0x92,
				(byte)0x7d,
				(byte)0x86,
				(byte)0x31,
				(byte)0x40,
				(byte)0x37,
				(byte)0x8a,
				(byte)0x82,
				(byte)0xe7,
				(byte)0x3f,
				(byte)0x0d,
				(byte)0x95,
				(byte)0x25,
				(byte)0xbb };
		nonRepPrivateKey.setPQ(PQ, (short)0, (short)64);

	}

}